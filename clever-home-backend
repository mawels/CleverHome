#!/usr/bin/python3

import subprocess, json, sys, os
from lirc import lirc
from command import command
from flask import Flask
from flask_restful import Resource, Api, reqparse

workdir = os.path.dirname(sys.argv[0])
os.chdir(workdir)

app = Flask(__name__)
api = Api(app)

class Config():
    __file = 'config.json'
    __modules = []
    __remotes = {}
    
    def load(self):
        try:
            configfile = open(self.__file, 'r')
            json_config = configfile.read()
            configfile.close()
            self.__remotes = json.loads(json_config)
        except IOError as e:          
            print(e.strerror)
        return

    def save(self):
        json_config = json.dumps(self.__remotes, indent=4)
        configfile = open(self.__file, 'w')
        configfile.write(json_config)
        configfile.close()
        return

    def generate(self):
        config = {}
        remote_names = self.__get_remote_names()
        print(remote_names)
        for remote_name in remote_names:
            codes = self.__get_remote_codes(remote_name)
            grid = self.__arrange_buttons(codes, 4)
            config[remote_name] = {}
            config[remote_name]["codes"]=grid
            config[remote_name]["type"]="lirc"
        self.__remotes = config

    def __get_remote_names(self):
        remote_names = []
        for name, module in self.__modules.items():
            remote_names.extend(module.get_remotes())
        return remote_names

    def __get_remote_codes(self, remote):
        return lirc.get_remote_codes(remote)

    def __arrange_buttons(self, codes, linelen):
        grid = []
        line = []
        for code in codes:
            line.append(code)
            if len(line) >= linelen:
                grid.append(line)
                line = []
        return grid
    
    def get_file(self):
        return self.__file

    def get_remotes(self):
        return self.__remotes
    
    def set_modules(self, modules):
        self.__modules = modules
    
    def get_modules(self):
        return self.__modules

class get_remotes(Resource):
    def get(self):
        config.load()
        return config.get_remotes()

class send_once(Resource):
    def post(self):
        parse = reqparse.RequestParser()
        parse.add_argument('remote')
        parse.add_argument('key')
        args = parse.parse_args()
        remote = args['remote']
        key = args['key']
        remote_type = config.get_remotes()[remote]["type"]
        modules = config.get_modules()
        modules[remote_type].send_once(remote, key)
        return "Success", 200, { "Access-Control-Allow-Origin" : "*" }

class send_start(Resource):
    def post(self):
        parse = reqparse.RequestParser()
        parse.add_argument('remote')
        parse.add_argument('key')
        args = parse.parse_args()
        remote = args['remote']
        key = args['key']
        remote_type = config.get_remotes()[remote]["type"]
        modules = config.get_modules()
        modules[remote_type].send_start(remote, key)
        return "Success", 200, { "Access-Control-Allow-Origin" : "*" }

class send_stop(Resource):
    def post(self):
        parse = reqparse.RequestParser()
        parse.add_argument('remote')
        parse.add_argument('key')
        args = parse.parse_args()
        remote = args['remote']
        key = args['key']
        remote_type = config.get_remotes()[remote]["type"]
        modules = config.get_modules()
        modules[remote_type].send_stop(remote, key)
        return "Success", 200, { "Access-Control-Allow-Origin" : "*" }

api.add_resource(get_remotes, '/get_remotes')
api.add_resource(send_once, '/send_once')
api.add_resource(send_start, '/send_start')
api.add_resource(send_stop, '/send_stop')

lastkey = "none"

if __name__ == '__main__':
    config = Config()
    modules = { 'lirc': lirc }
    config.set_modules(modules)
    if not os.path.exists(config.get_file()):
            config.generate()
            config.save()
    remotes = config.load()
        
    app.run(host="0.0.0.0", port=8080, threaded=True)
